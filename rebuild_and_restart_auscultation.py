#!/usr/bin/env python3
"""
Script automatis√© complet : Build + Install + Restart Service + Auscultation d'Accessibilit√©
Version avec int√©gration des nouveaux aiguillages d'auscultation
"""

import subprocess
import sys
import os
import time
import argparse
import hashlib
import json
import requests

def run_command(cmd, cwd=None, check=True, timeout=300):
    """Ex√©cute une commande et retourne le r√©sultat"""
    print(f"   Ex√©cution: {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, cwd=cwd, check=check, capture_output=True, text=True, encoding='utf-8', timeout=timeout)
        if result.stdout:
            # Afficher les derni√®res lignes importantes
            lines = result.stdout.strip().split('\n')
            for line in lines[-5:]:  # Afficher les 5 derni√®res lignes
                if line.strip():
                    print(f"   {line.strip()}")
        return result
    except subprocess.TimeoutExpired as e:
        print(f"   Timeout apr√®s {timeout}s - continuons...")
        return e
    except subprocess.CalledProcessError as e:
        print(f"   Erreur: {e}")
        if e.stderr:
            print(f"   {e.stderr.strip()}")
        return e

def check_appium():
    """V√©rifie qu'Appium tourne"""
    try:
        result = subprocess.run("netstat -ano | findstr :4723", shell=True, capture_output=True, text=True)
        return ":4723" in result.stdout
    except:
        return False

def get_file_hash(filepath):
    """Calcule le hash d'un fichier"""
    if not os.path.exists(filepath):
        return None
    with open(filepath, 'rb') as f:
        return hashlib.md5(f.read()).hexdigest()

def get_source_files_hash():
    """Calcule le hash de tous les fichiers sources Kotlin"""
    source_dir = "android-app/app/src/main/java"
    if not os.path.exists(source_dir):
        return None
    
    hashes = []
    for root, dirs, files in os.walk(source_dir):
        for file in files:
            if file.endswith('.kt'):
                filepath = os.path.join(root, file)
                file_hash = get_file_hash(filepath)
                if file_hash:
                    hashes.append(file_hash)
    
    if not hashes:
        return None
    
    # Combiner tous les hashes
    combined = ''.join(sorted(hashes))
    return hashlib.md5(combined.encode()).hexdigest()

def needs_rebuild():
    """V√©rifie si un rebuild est n√©cessaire"""
    apk_path = "android-app/app/build/outputs/apk/debug/app-debug.apk"
    hash_file = "android-app/.last_build_hash"
    
    # Si l'APK n'existe pas, rebuild n√©cessaire
    if not os.path.exists(apk_path):
        print("   APK n'existe pas - rebuild n√©cessaire")
        return True
    
    # Calculer le hash des sources actuelles
    current_hash = get_source_files_hash()
    if not current_hash:
        print("   Impossible de calculer le hash des sources - rebuild n√©cessaire")
        return True
    
    # Lire le hash de la derni√®re build
    last_hash = None
    if os.path.exists(hash_file):
        with open(hash_file, 'r') as f:
            last_hash = f.read().strip()
    
    # Comparer les hashes
    if current_hash != last_hash:
        print(f"   Code modifi√© (hash: {current_hash[:8]}...) - rebuild n√©cessaire")
        return True
    else:
        print(f"   Code inchang√© (hash: {current_hash[:8]}...) - skip rebuild")
        return False

def save_build_hash():
    """Sauvegarde le hash de la build actuelle"""
    hash_file = "android-app/.last_build_hash"
    current_hash = get_source_files_hash()
    if current_hash:
        with open(hash_file, 'w') as f:
            f.write(current_hash)

def build_auscultation_apk():
    """Construit l'APK avec l'int√©gration d'auscultation d'accessibilit√©"""
    print("   üîç Construction de l'APK avec int√©gration d'auscultation d'accessibilit√©...")
    
    # V√©rifier que les fichiers d'auscultation existent
    auscultation_files = [
        "android-app/app/src/main/java/com/bascule/leclerctracking/auscultation/A11yEventRaw.kt",
        "android-app/app/src/main/java/com/bascule/leclerctracking/auscultation/AppAuscultationAnalyzer.kt",
        "public/auscultation-dashboard.html",
        "accessibility-auscultation.js"
    ]
    
    missing_files = []
    for file_path in auscultation_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"   ‚ö†Ô∏è Fichiers d'auscultation manquants: {missing_files}")
        print("   üìù Les fichiers seront cr√©√©s pendant le build...")
    
    # Nettoyer le build pr√©c√©dent
    print("   üßπ Nettoyage du build pr√©c√©dent...")
    run_command("gradlew clean", cwd="android-app")
    
    # Construire l'APK
    print("   üî® Construction de l'APK avec fonctionnalit√©s d'auscultation...")
    result = run_command("gradlew assembleDebug", cwd="android-app", timeout=600)
    
    if hasattr(result, 'returncode') and result.returncode != 0:
        print("   ‚ùå Build √©chou√©!")
        return False
    
    print("   ‚úÖ APK avec auscultation d'accessibilit√© construit avec succ√®s!")
    return True

def start_server():
    """D√©marre le serveur Node.js"""
    print("   üöÄ D√©marrage du serveur...")
    try:
        # V√©rifier si le serveur tourne d√©j√†
        result = subprocess.run("netstat -ano | findstr :3001", shell=True, capture_output=True, text=True)
        if ":3001" in result.stdout:
            print("   ‚ö†Ô∏è Serveur d√©j√† en cours d'ex√©cution sur le port 3001")
            return True
        
        # D√©marrer le serveur en arri√®re-plan
        subprocess.Popen(["node", "server.js"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # Attendre que le serveur d√©marre
        time.sleep(3)
        
        # V√©rifier que le serveur r√©pond
        result = subprocess.run("curl -s http://localhost:3001", shell=True, capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("   ‚úÖ Serveur d√©marr√© avec succ√®s!")
            return True
        else:
            print("   ‚ö†Ô∏è Serveur d√©marr√© mais ne r√©pond pas encore")
            return True
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors du d√©marrage du serveur: {e}")
        return False

def test_auscultation_integration():
    """Teste l'int√©gration d'auscultation d'accessibilit√©"""
    print("   üß™ Test de l'int√©gration d'auscultation d'accessibilit√©...")
    
    try:
        # Tester l'endpoint d'auscultation
        result = subprocess.run("curl -s http://localhost:3001/api/accessibility-stats", shell=True, capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("   ‚úÖ Endpoints d'auscultation fonctionnels")
            return True
        else:
            print("   ‚ö†Ô∏è Endpoints d'auscultation non disponibles")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test: {e}")
        return False

def test_auscultation_advanced():
    """Teste l'auscultation avanc√©e selon le prompt original"""
    print("   üîç Test de l'auscultation avanc√©e...")
    
    try:
        # Ex√©cuter le test d'auscultation avanc√©e
        result = subprocess.run("node test-auscultation-advanced.js", shell=True, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("   ‚úÖ Test d'auscultation avanc√©e r√©ussi")
            return True
        else:
            print("   ‚ö†Ô∏è Test d'auscultation avanc√©e √©chou√©")
            print(f"   Erreur: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test avanc√©: {e}")
        return False

def check_auscultation_dashboards():
    """V√©rifie que les dashboards d'auscultation sont accessibles"""
    print("   üìä V√©rification des dashboards d'auscultation...")
    
    dashboards = [
        ("http://localhost:3001/auscultation-dashboard", "Dashboard d'auscultation avanc√©e"),
        ("http://localhost:3001/accessibility-dashboard", "Dashboard d'accessibilit√© standard")
    ]
    
    accessible_dashboards = []
    
    for url, name in dashboards:
        try:
            result = subprocess.run(f"curl -s -o nul -w \"%{{http_code}}\" {url}", shell=True, capture_output=True, text=True, timeout=10)
            if result.stdout.strip() == "200":
                print(f"   ‚úÖ {name} accessible")
                accessible_dashboards.append(name)
            else:
                print(f"   ‚ùå {name} non accessible (code: {result.stdout.strip()})")
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la v√©rification de {name}: {e}")
    
    return len(accessible_dashboards) > 0

def generate_auscultation_report():
    """G√©n√®re un rapport d'auscultation"""
    print("   üìã G√©n√©ration d'un rapport d'auscultation...")
    
    try:
        # G√©n√©rer un rapport d'auscultation
        report_data = {
            "deviceId": "test-device-auscultation",
            "sessionId": "test-session-auscultation"
        }
        
        response = requests.post("http://localhost:3001/api/auscultation-report", json=report_data, timeout=10)
        
        if response.status_code == 200:
            report = response.json()
            print(f"   ‚úÖ Rapport g√©n√©r√©: {report.get('report', {}).get('id', 'N/A')}")
            return True
        else:
            print(f"   ‚ùå Erreur lors de la g√©n√©ration du rapport: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Build + Install + Restart Service + Auscultation')
    parser.add_argument('--skip-build', action='store_true', help='Skip APK build')
    parser.add_argument('--auscultation-only', action='store_true', help='Build uniquement avec fonctionnalit√©s d\'auscultation')
    parser.add_argument('--test-auscultation', action='store_true', help='Tester l\'int√©gration d\'auscultation')
    parser.add_argument('--test-advanced', action='store_true', help='Tester l\'auscultation avanc√©e')
    parser.add_argument('--start-server', action='store_true', help='D√©marrer le serveur Node.js')
    parser.add_argument('--check-dashboards', action='store_true', help='V√©rifier les dashboards')
    parser.add_argument('--generate-report', action='store_true', help='G√©n√©rer un rapport d\'auscultation')
    parser.add_argument('--full-auscultation', action='store_true', help='Ex√©cuter tous les tests d\'auscultation')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("  REBUILD & RESTART + AUSCULTATION D'ACCESSIBILIT√â")
    print("=" * 60)
    print()
    
    # Etape 1 : Build et Install APK (seulement si n√©cessaire)
    if not args.skip_build:
        print("1. V√©rification des modifications...")
        
        if needs_rebuild() or args.auscultation_only:
            print("   Rebuild n√©cessaire!")
            
            if args.auscultation_only or args.full_auscultation:
                print("   üîç Mode auscultation d'accessibilit√© activ√©")
                if not build_auscultation_apk():
                    sys.exit(1)
            else:
                print("   Nettoyage...")
                run_command("gradlew clean", cwd="android-app")
                
                print("   Compilation... (peut prendre 2-3 minutes)")
                result = run_command("gradlew assembleDebug", cwd="android-app", timeout=600)
                if hasattr(result, 'returncode') and result.returncode != 0:
                    print("   Build √©chou√©!")
                    sys.exit(1)
                print("   Compilation termin√©e!")
            
            # Sauvegarder le hash de cette build
            save_build_hash()
        else:
            print("   Pas de modifications d√©tect√©es - skip compilation")
        
        # V√©rification APK
        apk_path = "android-app/app/build/outputs/apk/debug/app-debug.apk"
        if not os.path.exists(apk_path):
            print("   APK non trouv√©!")
            sys.exit(1)
        
        # Installation (toujours faire pour √™tre s√ªr)
        print("   Installation...")
        full_path = os.path.abspath(apk_path)
        print(f"   Chemin APK: {full_path}")
        run_command(f'adb install -r "{full_path}"')
        print("   APK install√©")
    else:
        print("1. Build ignor√© (SkipBuild)")
        print()
    
    # Etape 2 : Force stop de l'app
    print("2. Arr√™t de l'app de tracking...")
    run_command("adb shell am force-stop com.bascule.leclerctracking")
    print("   App arr√™t√©e")
    print()
    
    # Etape 3 : Vider le cache Logcat
    print("3. Vidage du cache Logcat...")
    run_command("adb logcat -c")
    print("   Cache vid√©")
    print()
    
    # Etape 4 : D√©marrage du serveur (si demand√©)
    if args.start_server or args.test_auscultation or args.test_advanced or args.full_auscultation:
        print("4. D√©marrage du serveur...")
        if start_server():
            print("   ‚úÖ Serveur op√©rationnel")
        else:
            print("   ‚ö†Ô∏è Probl√®me avec le serveur")
        print()
    else:
        print("4. Serveur ignor√© (utilisez --start-server pour le d√©marrer)")
        print()
    
    # Etape 5 : Test de l'int√©gration d'auscultation
    if args.test_auscultation or args.full_auscultation:
        print("5. Test de l'int√©gration d'auscultation...")
        if test_auscultation_integration():
            print("   ‚úÖ Int√©gration d'auscultation fonctionnelle")
        else:
            print("   ‚ö†Ô∏è Probl√®me avec l'int√©gration d'auscultation")
        print()
    else:
        print("5. Test d'auscultation ignor√© (utilisez --test-auscultation)")
        print()
    
    # Etape 6 : Test de l'auscultation avanc√©e
    if args.test_advanced or args.full_auscultation:
        print("6. Test de l'auscultation avanc√©e...")
        if test_auscultation_advanced():
            print("   ‚úÖ Auscultation avanc√©e fonctionnelle")
        else:
            print("   ‚ö†Ô∏è Probl√®me avec l'auscultation avanc√©e")
        print()
    else:
        print("6. Test d'auscultation avanc√©e ignor√© (utilisez --test-advanced)")
        print()
    
    # Etape 7 : V√©rification des dashboards
    if args.check_dashboards or args.full_auscultation:
        print("7. V√©rification des dashboards...")
        if check_auscultation_dashboards():
            print("   ‚úÖ Dashboards d'auscultation accessibles")
        else:
            print("   ‚ö†Ô∏è Probl√®me avec les dashboards")
        print()
    else:
        print("7. V√©rification des dashboards ignor√©e (utilisez --check-dashboards)")
        print()
    
    # Etape 8 : G√©n√©ration de rapport
    if args.generate_report or args.full_auscultation:
        print("8. G√©n√©ration de rapport d'auscultation...")
        if generate_auscultation_report():
            print("   ‚úÖ Rapport d'auscultation g√©n√©r√©")
        else:
            print("   ‚ö†Ô∏è Probl√®me avec la g√©n√©ration du rapport")
        print()
    else:
        print("8. G√©n√©ration de rapport ignor√©e (utilisez --generate-report)")
        print()
    
    # Etape 9 : Skip Appium (pas n√©cessaire pour l'auscultation)
    print("9. Appium ignor√© (pas n√©cessaire pour l'auscultation)")
    print()
    
    # Etape 10 : Skip service restart (pas n√©cessaire sans Appium)
    print("10. Service d'accessibilit√© ignor√© (pas n√©cessaire sans Appium)")
    print()
    
    # Etape 11 : Retour √† l'accueil
    print("11. Retour √† l'√©cran d'accueil...")
    run_command("adb shell input keyevent KEYCODE_HOME")
    time.sleep(1)
    print("   Accueil OK")
    print()
    
    # Etape 12 : Lancer l'app de tracking
    print("12. Lancement de l'app de tracking...")
    run_command("adb shell monkey -p com.bascule.leclerctracking -c android.intent.category.LAUNCHER 1")
    time.sleep(2)
    print("   App lanc√©e")
    print()
    
    # Etape 13 : Ouvrir les param√®tres d'accessibilit√©
    print("13. Ouverture des param√®tres d'accessibilit√©...")
    run_command("adb shell am start -a android.settings.ACCESSIBILITY_SETTINGS")
    time.sleep(3)
    print("   Param√®tres ouverts - Activez 'OptimizedCarrefourTracking' manuellement")
    print()
    
    # Etape 14 : Lancer Carrefour
    print("14. Lancement de Carrefour...")
    run_command("adb shell monkey -p com.carrefour.fid.android -c android.intent.category.LAUNCHER 1")
    time.sleep(2)
    print("   Carrefour lanc√©")
    print()
    
    print("=" * 60)
    print("  PR√äT POUR L'AUSCULTATION D'ACCESSIBILIT√â!")
    print("=" * 60)
    print()
    print("Prochaines √©tapes:")
    print("  - Lance le serveur: python rebuild_and_restart_auscultation.py --start-server")
    print("  - Test d'auscultation: python rebuild_and_restart_auscultation.py --test-auscultation")
    print("  - Test avanc√©: python rebuild_and_restart_auscultation.py --test-advanced")
    print("  - Test complet: python rebuild_and_restart_auscultation.py --full-auscultation")
    print("  - Build auscultation: python rebuild_and_restart_auscultation.py --auscultation-only")
    print()
    print("Dashboards disponibles:")
    print("  - Auscultation avanc√©e: http://localhost:3001/auscultation-dashboard")
    print("  - Accessibilit√© standard: http://localhost:3001/accessibility-dashboard")
    print()
    print("Fonctionnalit√©s d'auscultation:")
    print("  ‚úÖ D√©tection d'app et profil d'auscultation")
    print("  ‚úÖ Normalisation des √©v√©nements bruts")
    print("  ‚úÖ Cat√©gorisation e-commerce (ADD_TO_CART, PRODUCT_DETAIL, etc.)")
    print("  ‚úÖ Inf√©rence d'actions m√©tier avec justification")
    print("  ‚úÖ Scoring de confiance d√©taill√©")
    print("  ‚úÖ Rapport structur√© JSON + r√©sum√© Markdown")
    print()

if __name__ == "__main__":
    main()
