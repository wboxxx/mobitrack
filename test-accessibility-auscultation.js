/**
 * Script de test pour l'auscultation d'accessibilit√©
 * Simule des √©v√©nements d'accessibilit√© Android pour tester le syst√®me
 */

const axios = require('axios');

const SERVER_URL = 'http://localhost:3001';

// Donn√©es de test simul√©es
const mockAccessibilityEvents = [
  {
    eventType: 'VIEW_CLICKED',
    timestamp: new Date(Date.now() - 30000).toISOString(),
    data: {
      packageName: 'com.carrefour.mobile',
      activity: 'com.carrefour.mobile.MainActivity',
      element: {
        className: 'android.widget.Button',
        id: 'add_to_cart_button',
        text: 'Ajouter au panier',
        contentDescription: 'Ajouter au panier',
        bounds: { left: 100, top: 500, right: 300, bottom: 550 }
      },
      productInfo: {
        productName: 'Bananes bio',
        price: '2.99‚Ç¨',
        cartAction: 'Ajouter au panier',
        allTexts: ['Bananes bio', '2.99‚Ç¨', 'Ajouter au panier']
      }
    }
  },
  {
    eventType: 'VIEW_CLICKED',
    timestamp: new Date(Date.now() - 25000).toISOString(),
    data: {
      packageName: 'com.carrefour.mobile',
      activity: 'com.carrefour.mobile.MainActivity',
      element: {
        className: 'android.widget.TextView',
        id: 'search_field',
        text: 'Rechercher des produits',
        contentDescription: 'Champ de recherche',
        bounds: { left: 50, top: 100, right: 350, bottom: 150 }
      }
    }
  },
  {
    eventType: 'SCROLL',
    timestamp: new Date(Date.now() - 20000).toISOString(),
    data: {
      packageName: 'com.carrefour.mobile',
      activity: 'com.carrefour.mobile.MainActivity',
      element: {
        className: 'androidx.recyclerview.widget.RecyclerView',
        id: 'product_list',
        bounds: { left: 0, top: 200, right: 400, bottom: 800 }
      },
      scrollInfo: {
        context: 'product_list',
        scrollX: 0,
        scrollY: 100
      }
    }
  },
  {
    eventType: 'VIEW_CLICKED',
    timestamp: new Date(Date.now() - 15000).toISOString(),
    data: {
      packageName: 'com.carrefour.mobile',
      activity: 'com.carrefour.mobile.MainActivity',
      element: {
        className: 'android.widget.ImageView',
        id: 'cart_icon',
        text: '',
        contentDescription: 'Panier',
        bounds: { left: 350, top: 50, right: 400, bottom: 100 }
      }
    }
  },
  {
    eventType: 'CONTENT_CHANGED',
    timestamp: new Date(Date.now() - 10000).toISOString(),
    data: {
      packageName: 'com.carrefour.mobile',
      activity: 'com.carrefour.mobile.CartActivity',
      element: {
        className: 'android.widget.TextView',
        id: 'cart_total',
        text: 'Total: 5.98‚Ç¨',
        contentDescription: 'Total du panier',
        bounds: { left: 50, top: 600, right: 200, bottom: 650 }
      }
    }
  },
  {
    eventType: 'VIEW_CLICKED',
    timestamp: new Date(Date.now() - 5000).toISOString(),
    data: {
      packageName: 'com.carrefour.mobile',
      activity: 'com.carrefour.mobile.CartActivity',
      element: {
        className: 'android.widget.Button',
        id: 'checkout_button',
        text: 'Commander',
        contentDescription: 'Passer la commande',
        bounds: { left: 100, top: 700, right: 300, bottom: 750 }
      }
    }
  }
];

async function testAccessibilityAuscultation() {
  console.log('üß™ Test de l\'auscultation d\'accessibilit√©');
  console.log('==========================================');

  try {
    // 1. Envoyer des √©v√©nements d'accessibilit√©
    console.log('\nüì± 1. Envoi des √©v√©nements d\'accessibilit√©...');
    const eventsResponse = await axios.post(`${SERVER_URL}/api/accessibility-events`, {
      events: mockAccessibilityEvents,
      deviceId: 'test-device-001',
      sessionId: 'test-session-' + Date.now()
    });

    if (eventsResponse.data.success) {
      console.log(`‚úÖ ${eventsResponse.data.count} √©v√©nements envoy√©s avec succ√®s`);
    } else {
      console.log('‚ùå Erreur lors de l\'envoi des √©v√©nements');
      return;
    }

    // 2. Attendre un peu pour que les √©v√©nements soient trait√©s
    console.log('\n‚è≥ Attente de 2 secondes...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 3. R√©cup√©rer les statistiques
    console.log('\nüìä 2. R√©cup√©ration des statistiques...');
    const statsResponse = await axios.get(`${SERVER_URL}/api/accessibility-stats`);
    
    if (statsResponse.data.success) {
      const stats = statsResponse.data.stats;
      console.log('‚úÖ Statistiques r√©cup√©r√©es:');
      console.log(`   - √âv√©nements totaux: ${stats.totalEvents}`);
      console.log(`   - P√©riph√©riques uniques: ${stats.uniqueDevices}`);
      console.log(`   - Sessions uniques: ${stats.uniqueSessions}`);
      console.log(`   - Types d'√©v√©nements:`, stats.eventTypes);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des statistiques');
    }

    // 4. G√©n√©rer un rapport d'auscultation
    console.log('\nüìã 3. G√©n√©ration du rapport d\'auscultation...');
    const reportResponse = await axios.post(`${SERVER_URL}/api/auscultation-report`, {
      deviceId: 'test-device-001'
    });

    if (reportResponse.data.success) {
      console.log(`‚úÖ Rapport g√©n√©r√© avec succ√®s (ID: ${reportResponse.data.reportId})`);
      console.log(`   - √âv√©nements analys√©s: ${reportResponse.data.eventCount}`);
      
      // Afficher le r√©sum√© du rapport
      const report = reportResponse.data.report;
      console.log('\nüìÑ R√©sum√© du rapport:');
      console.log('===================');
      console.log(report.summary_md);
      
      // Afficher les d√©tails du profil de l'app
      console.log('\nüì± Profil de l\'application:');
      console.log(`   - Package: ${report.app_profile.package}`);
      console.log(`   - Marque: ${report.app_profile.likely_brand}`);
      console.log(`   - √âv√©nements: ${report.app_profile.event_count}`);
      
      // Afficher les capacit√©s d√©tect√©es
      console.log('\nüéØ Capacit√©s d√©tect√©es:');
      const capabilities = report.capability_map;
      console.log(`   - √âmet des clics: ${capabilities.emits_clicks ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - √âmet des scrolls: ${capabilities.emits_scrolls ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Expose des IDs: ${capabilities.exposes_ids ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Richesse du texte: ${capabilities.text_richness}`);
      
      // Afficher la timeline
      console.log('\n‚è∞ Timeline des √©v√©nements:');
      report.session_timeline.forEach((event, index) => {
        console.log(`   ${index + 1}. ${event.ts}: ${event.category} - ${event.label} (${(event.confidence * 100).toFixed(1)}%)`);
      });
      
      // Afficher les cat√©gories d√©tect√©es
      console.log('\nüìä Cat√©gories d√©tect√©es:');
      report.categorized_events.forEach(category => {
        console.log(`   - ${category.category}: ${category.count} √©v√©nements`);
        if (category.examples.length > 0) {
          console.log(`     Exemples: ${category.examples.join(', ')}`);
        }
      });
      
    } else {
      console.log('‚ùå Erreur lors de la g√©n√©ration du rapport');
      console.log(`   Message: ${reportResponse.data.message}`);
    }

    // 5. R√©cup√©rer la liste des rapports
    console.log('\nüìã 4. R√©cup√©ration de la liste des rapports...');
    const reportsResponse = await axios.get(`${SERVER_URL}/api/auscultation-reports`);
    
    if (reportsResponse.data.success) {
      console.log(`‚úÖ ${reportsResponse.data.reports.length} rapports trouv√©s`);
      reportsResponse.data.reports.forEach((report, index) => {
        console.log(`   ${index + 1}. Rapport ${report.id} (${report.eventCount} √©v√©nements) - ${report.createdAt}`);
      });
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des rapports');
    }

    console.log('\nüéâ Test termin√© avec succ√®s!');
    console.log('\nüí° Vous pouvez maintenant:');
    console.log('   - Ouvrir http://localhost:3001/accessibility-dashboard pour voir l\'interface');
    console.log('   - Consulter les rapports g√©n√©r√©s');
    console.log('   - Analyser les √©v√©nements d\'accessibilit√©');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    if (error.response) {
      console.error('   D√©tails:', error.response.data);
    }
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData() {
  try {
    console.log('\nüßπ Nettoyage des donn√©es de test...');
    await axios.post(`${SERVER_URL}/api/accessibility-events-clear`, {});
    console.log('‚úÖ Donn√©es de test effac√©es');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error.message);
  }
}

// Ex√©cuter le test
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--cleanup')) {
    cleanupTestData();
  } else {
    testAccessibilityAuscultation();
  }
}

module.exports = {
  testAccessibilityAuscultation,
  cleanupTestData,
  mockAccessibilityEvents
};
